
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 05 15:07:16 VET 2016
//----------------------------------------------------

package Tiny;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 05 15:07:16 VET 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\004\000\002\010" +
    "\004\000\002\010\003\000\002\010\002\000\002\011\010" +
    "\000\002\012\005\000\002\012\004\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\003\000\002\016\005\000\002\014\006\000" +
    "\002\014\010\000\002\015\010\000\002\017\006\000\002" +
    "\017\004\000\002\017\002\000\002\020\005\000\002\020" +
    "\003\000\002\020\002\000\002\022\007\000\002\022\011" +
    "\000\002\021\014\000\002\023\006\000\002\024\005\000" +
    "\002\024\005\000\002\025\004\000\002\026\004\000\002" +
    "\027\005\000\002\027\005\000\002\027\003\000\002\030" +
    "\005\000\002\030\005\000\002\030\003\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\003\000\002\032\005\000\002\032\005\000\002" +
    "\032\003\000\002\033\005\000\002\033\005\000\002\033" +
    "\003\000\002\034\006\000\002\035\005\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\004\010\ufffd\001\002\000\004\010\ufffe\001" +
    "\002\000\004\010\022\001\002\000\004\002\200\001\002" +
    "\000\004\056\010\001\002\000\004\036\011\001\002\000" +
    "\010\037\uffe7\047\uffe7\053\013\001\002\000\006\037\015" +
    "\047\016\001\002\000\004\056\014\001\002\000\006\037" +
    "\uffe8\047\uffe8\001\002\000\004\010\022\001\002\000\004" +
    "\053\017\001\002\000\004\056\020\001\002\000\006\037" +
    "\uffe9\047\uffe9\001\002\000\004\010\ufffc\001\002\000\022" +
    "\003\036\004\031\017\044\021\024\022\032\043\041\052" +
    "\027\056\033\001\002\000\004\042\ufff8\001\002\000\004" +
    "\056\177\001\002\000\004\024\175\001\002\000\004\056" +
    "\165\001\002\000\016\003\064\023\054\036\066\050\162" +
    "\051\163\056\062\001\002\000\004\042\ufff6\001\002\000" +
    "\012\003\064\023\054\036\066\056\062\001\002\000\012" +
    "\003\064\023\054\036\066\056\062\001\002\000\012\024" +
    "\137\025\142\036\143\040\116\001\002\000\004\042\ufff3" +
    "\001\002\000\024\003\036\004\031\011\141\017\044\021" +
    "\024\022\032\043\041\052\027\056\033\001\002\000\004" +
    "\042\uffee\001\002\000\004\042\ufff9\001\002\000\004\042" +
    "\ufff4\001\002\000\004\036\125\001\002\000\004\042\ufff5" +
    "\001\002\000\004\042\ufff2\001\002\000\022\003\036\004" +
    "\031\017\044\021\024\022\032\043\041\052\027\056\033" +
    "\001\002\000\004\042\ufff7\001\002\000\004\042\047\001" +
    "\002\000\030\003\ufffa\004\ufffa\006\ufffa\011\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\043\ufffa\052\ufffa\056\ufffa\001" +
    "\002\000\024\003\036\004\031\017\044\020\051\021\024" +
    "\022\032\043\041\052\027\056\033\001\002\000\012\003" +
    "\064\023\054\036\066\056\062\001\002\000\004\042\053" +
    "\001\002\000\030\003\ufffb\004\ufffb\006\ufffb\011\ufffb\017" +
    "\ufffb\020\ufffb\021\ufffb\022\ufffb\043\ufffb\052\ufffb\056\ufffb" +
    "\001\002\000\044\005\uffc8\025\uffc8\026\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\037\uffc8" +
    "\041\uffc8\042\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\001" +
    "\002\000\044\005\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\037\uffc6\041" +
    "\uffc6\042\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\001\002" +
    "\000\044\005\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\101\035\100\037\uffce\041\uffce" +
    "\042\uffce\044\uffce\045\uffce\046\uffce\047\uffce\001\002\000" +
    "\010\042\uffe0\045\121\046\122\001\002\000\014\005\uffd9" +
    "\037\uffd9\042\uffd9\045\uffd9\046\uffd9\001\002\000\014\005" +
    "\uffd6\037\uffd6\042\uffd6\045\uffd6\046\uffd6\001\002\000\046" +
    "\005\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\037\uffc7\040\116\041\uffc7" +
    "\042\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\001\002\000" +
    "\044\005\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\032\uffcb\033\uffcb\034\uffcb\035\uffcb\037\uffcb\041\uffcb\042" +
    "\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\001\002\000\044" +
    "\005\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\037\uffc5\041\uffc5\042\uffc5" +
    "\044\uffc5\045\uffc5\046\uffc5\047\uffc5\001\002\000\034\005" +
    "\uffd1\025\112\026\073\027\074\030\071\031\072\032\075" +
    "\033\076\037\uffd1\042\uffd1\044\113\045\uffd1\046\uffd1\001" +
    "\002\000\012\003\064\023\054\036\066\056\062\001\002" +
    "\000\004\037\111\001\002\000\024\026\073\027\074\030" +
    "\071\031\072\032\075\033\076\037\uffd1\042\uffd1\047\uffd1" +
    "\001\002\000\012\003\064\023\054\036\066\056\062\001" +
    "\002\000\012\003\064\023\054\036\066\056\062\001\002" +
    "\000\012\003\064\023\054\036\066\056\062\001\002\000" +
    "\012\003\064\023\054\036\066\056\062\001\002\000\012" +
    "\003\064\023\054\036\066\056\062\001\002\000\012\003" +
    "\064\023\054\036\066\056\062\001\002\000\044\005\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\101\035\100\037\uffcf\041\uffcf\042\uffcf\044\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\001\002\000\012\003\064\023" +
    "\054\036\066\056\062\001\002\000\012\003\064\023\054" +
    "\036\066\056\062\001\002\000\044\005\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\037\uffcd\041\uffcd\042\uffcd\044\uffcd\045\uffcd\046" +
    "\uffcd\047\uffcd\001\002\000\044\005\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\037\uffcc\041\uffcc\042\uffcc\044\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\001\002\000\044\005\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\101\035\100" +
    "\037\uffd0\041\uffd0\042\uffd0\044\uffd0\045\uffd0\046\uffd0\047" +
    "\uffd0\001\002\000\022\005\uffd4\032\075\033\076\037\uffd4" +
    "\042\uffd4\045\uffd4\046\uffd4\047\uffd4\001\002\000\022\005" +
    "\uffd5\032\075\033\076\037\uffd5\042\uffd5\045\uffd5\046\uffd5" +
    "\047\uffd5\001\002\000\022\005\uffd3\032\075\033\076\037" +
    "\uffd3\042\uffd3\045\uffd3\046\uffd3\047\uffd3\001\002\000\022" +
    "\005\uffd2\032\075\033\076\037\uffd2\042\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\001\002\000\044\005\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\037\uffc9\041\uffc9\042\uffc9\044\uffc9\045\uffc9\046\uffc9" +
    "\047\uffc9\001\002\000\012\003\064\023\054\036\066\056" +
    "\062\001\002\000\012\003\064\023\054\036\066\056\062" +
    "\001\002\000\020\005\uffd7\032\075\033\076\037\uffd7\042" +
    "\uffd7\045\uffd7\046\uffd7\001\002\000\020\005\uffd8\032\075" +
    "\033\076\037\uffd8\042\uffd8\045\uffd8\046\uffd8\001\002\000" +
    "\012\003\064\023\054\036\066\056\062\001\002\000\010" +
    "\032\075\033\076\041\120\001\002\000\046\005\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\037\uffca\041\uffca\042\uffca\044" +
    "\uffca\045\uffca\046\uffca\047\uffca\001\002\000\012\003\064" +
    "\023\054\036\066\056\062\001\002\000\012\003\064\023" +
    "\054\036\066\056\062\001\002\000\014\005\uffdb\037\uffdb" +
    "\042\uffdb\045\uffdb\046\uffdb\001\002\000\014\005\uffda\037" +
    "\uffda\042\uffda\045\uffda\046\uffda\001\002\000\004\056\126" +
    "\001\002\000\006\024\137\040\116\001\002\000\004\042" +
    "\130\001\002\000\012\003\064\023\054\036\066\056\062" +
    "\001\002\000\004\042\132\001\002\000\004\056\126\001" +
    "\002\000\004\037\134\001\002\000\022\003\036\004\031" +
    "\017\044\021\024\022\032\043\041\052\027\056\033\001" +
    "\002\000\024\003\036\004\031\011\136\017\044\021\024" +
    "\022\032\043\041\052\027\056\033\001\002\000\004\042" +
    "\uffe1\001\002\000\012\003\064\023\054\036\066\056\062" +
    "\001\002\000\012\037\uffdf\042\uffdf\045\121\046\122\001" +
    "\002\000\010\002\uffed\010\uffed\042\uffed\001\002\000\004" +
    "\056\146\001\002\000\010\037\uffe7\047\uffe7\053\013\001" +
    "\002\000\006\037\145\047\016\001\002\000\004\042\uffec" +
    "\001\002\000\004\036\147\001\002\000\010\037\uffe7\047" +
    "\uffe7\053\013\001\002\000\006\037\151\047\016\001\002" +
    "\000\004\042\uffeb\001\002\000\010\042\uffdc\045\121\046" +
    "\122\001\002\000\010\005\154\045\121\046\122\001\002" +
    "\000\022\003\036\004\031\017\044\021\024\022\032\043" +
    "\041\052\027\056\033\001\002\000\026\003\036\004\031" +
    "\006\156\011\157\017\044\021\024\022\032\043\041\052" +
    "\027\056\033\001\002\000\022\003\036\004\031\017\044" +
    "\021\024\022\032\043\041\052\027\056\033\001\002\000" +
    "\004\042\uffe3\001\002\000\024\003\036\004\031\011\161" +
    "\017\044\021\024\022\032\043\041\052\027\056\033\001" +
    "\002\000\004\042\uffe2\001\002\000\004\042\ufff0\001\002" +
    "\000\004\042\uffef\001\002\000\010\032\075\033\076\042" +
    "\ufff1\001\002\000\004\036\166\001\002\000\016\003\064" +
    "\023\054\036\066\037\uffe4\047\uffe4\056\062\001\002\000" +
    "\006\037\171\047\172\001\002\000\006\037\uffe5\047\uffe5" +
    "\001\002\000\004\010\022\001\002\000\012\003\064\023" +
    "\054\036\066\056\062\001\002\000\006\037\uffe6\047\uffe6" +
    "\001\002\000\004\042\uffea\001\002\000\012\003\064\023" +
    "\054\036\066\056\062\001\002\000\012\037\uffde\042\uffde" +
    "\045\121\046\122\001\002\000\004\042\uffdd\001\002\000" +
    "\004\002\000\001\002\000\004\002\001\001\002\000\004" +
    "\010\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\012\002\005\010\004\011\003\036\006\001" +
    "\001\000\002\001\001\000\010\011\201\016\200\036\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\012\034\013\045\014\042\015\033\021" +
    "\037\022\036\023\022\024\044\025\027\026\041\034\024" +
    "\036\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\032\163\033\055" +
    "\034\054\035\062\001\001\000\002\001\001\000\020\027" +
    "\152\030\057\031\060\032\064\033\055\034\054\035\062" +
    "\001\001\000\020\027\151\030\057\031\060\032\064\033" +
    "\055\034\054\035\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\013\051\014\042\015\033\021\037\022" +
    "\036\023\022\024\044\025\027\026\041\034\024\036\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\012\047\013\045\014\042\015\033\021\037\022" +
    "\036\023\022\024\044\025\027\026\041\034\024\036\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\013\051\014\042\015\033\021\037\022\036" +
    "\023\022\024\044\025\027\026\041\034\024\036\025\001" +
    "\001\000\020\027\056\030\057\031\060\032\064\033\055" +
    "\034\054\035\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\031\066\032\067\033\055\034\054\035" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\032\107\033\055\034\054\035\062\001\001\000\012\032" +
    "\106\033\055\034\054\035\062\001\001\000\012\032\105" +
    "\033\055\034\054\035\062\001\001\000\012\032\104\033" +
    "\055\034\054\035\062\001\001\000\010\033\103\034\054" +
    "\035\062\001\001\000\010\033\076\034\054\035\062\001" +
    "\001\000\002\001\001\000\006\034\054\035\102\001\001" +
    "\000\006\034\054\035\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\032\114\033\055\034\054\035\062\001\001" +
    "\000\012\032\113\033\055\034\054\035\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\032\116\033\055" +
    "\034\054\035\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\030\123\031\060\032\064\033\055\034\054" +
    "\035\062\001\001\000\016\030\122\031\060\032\064\033" +
    "\055\034\054\035\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\126\034\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\031\130\032\067\033\055" +
    "\034\054\035\062\001\001\000\002\001\001\000\006\024" +
    "\132\034\024\001\001\000\002\001\001\000\032\012\134" +
    "\013\045\014\042\015\033\021\037\022\036\023\022\024" +
    "\044\025\027\026\041\034\024\036\025\001\001\000\030" +
    "\013\051\014\042\015\033\021\037\022\036\023\022\024" +
    "\044\025\027\026\041\034\024\036\025\001\001\000\002" +
    "\001\001\000\020\027\137\030\057\031\060\032\064\033" +
    "\055\034\054\035\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\012\154\013\045" +
    "\014\042\015\033\021\037\022\036\023\022\024\044\025" +
    "\027\026\041\034\024\036\025\001\001\000\030\013\051" +
    "\014\042\015\033\021\037\022\036\023\022\024\044\025" +
    "\027\026\041\034\024\036\025\001\001\000\032\012\157" +
    "\013\045\014\042\015\033\021\037\022\036\023\022\024" +
    "\044\025\027\026\041\034\024\036\025\001\001\000\002" +
    "\001\001\000\030\013\051\014\042\015\033\021\037\022" +
    "\036\023\022\024\044\025\027\026\041\034\024\036\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\020\166" +
    "\031\167\032\067\033\055\034\054\035\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\173\001\001" +
    "\000\014\031\172\032\067\033\055\034\054\035\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\027\175" +
    "\030\057\031\060\032\064\033\055\034\054\035\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= error 
            {
              NodoBase RESULT =null;
			
			if(modoDepuracion) System.out.println("\t regla 23g: error en factor");
			RESULT = null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= vector 
            {
              NodoBase RESULT =null;
		int vecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase vec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if(modoDepuracion) System.out.println("\t regla 23f: sentencia factor a vector");
		RESULT = vec;	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
			if(variable!=null)
			{
				if(modoDepuracion) System.out.println("\t regla 23d: sentencia de factor a variable");
				RESULT= new NodoIdentificador(variable.toString());			
			}else
			{
				if(modoDepuracion) System.out.println("\t regla 23e: error por variable nula");
				RESULT = null;		
			}	
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
			if(valor!=null)
			{
				if(modoDepuracion) System.out.println("\t regla 23b: sentencia de factor a valor numerico");
				RESULT = new NodoValor(valor);			
			}else
			{
				if(modoDepuracion) System.out.println("\t regla 23c: error por valor numerico nulo");
				RESULT = null;		
			}	
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= LPAREN exp1 RPAREN 
            {
              NodoBase RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
				
			if(modoDepuracion) System.out.println("\t regla 23a: sentencia de factor a exp1");
			RESULT = e;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // vector ::= ID LCORCHETE simple_exp RCORCHETE 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase e = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			
			if(modoDepuracion) System.out.println("\t regla 22a: sentencia de vector completo");
			RESULT = new NodoVector(variable.toString(),e);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= factor 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
			if(modoDepuracion) System.out.println("\t regla 21c: sentencia termino a factor");
			RESULT = ex;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
			if(modoDepuracion) System.out.println("\t regla 21b: sentencia de operacion division");
			RESULT = new NodoOperacion(exI,tipoOp.entre,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
			if(modoDepuracion) System.out.println("\t regla 21a: sentencia de operacion multiplicacion");
			RESULT = new NodoOperacion(exI,tipoOp.por,exD);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // simple_exp ::= term 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
			if(modoDepuracion) System.out.println("\t regla 20e: sentencia simple_exp a termino");
			RESULT = ex;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simple_exp ::= simple_exp MINUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
			if(modoDepuracion) System.out.println("\t regla 20d: sentencia de operacion resta");
			RESULT = new NodoOperacion(exI,tipoOp.menos,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_exp ::= simple_exp PLUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
			if(modoDepuracion) System.out.println("\t regla 20d: sentencia de operacion suma");
			RESULT = new NodoOperacion(exI,tipoOp.mas,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp1 ::= simple_exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
			if(modoDepuracion) System.out.println("\t regla 19e: sentencia exp1 a expresion simple");
			RESULT = ex;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp1 ::= simple_exp MAYORIGUAL simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
			if(modoDepuracion) System.out.println("\t regla 19d: sentencia de operacion mayor o igual que");
			RESULT = new NodoOperacion(exI,tipoOp.mayorigual,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp1 ::= simple_exp MENORIGUAL simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 19c: sentencia de operacion menor o igual que");
			RESULT = new NodoOperacion(exI,tipoOp.menorigual,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp1 ::= simple_exp BT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 19b: sentencia de operacion mayor que");
			RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp1 ::= simple_exp LT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 19a: sentencia de operacion menor que");
			RESULT = new NodoOperacion(exI,tipoOp.menor,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp2 ::= exp1 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
			if(modoDepuracion) System.out.println("\t regla 18c: sentencia exp2 a exp1");
			RESULT = ex;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp2 ::= simple_exp DIFERENTE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
			if(modoDepuracion) System.out.println("\t regla 18b: sentencia de operacion diferente");
			RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp2 ::= simple_exp EQ simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 18a: sentencia de operacion igual");
			RESULT = new NodoOperacion(exI,tipoOp.igual,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp3 ::= exp2 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 17c: sentencia exp3 a exp2");
			RESULT = ex;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp3 ::= exp3 AND exp2 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 17b: sentencia de operacion AND");
			RESULT = new NodoOperacion(exI,tipoOp.and,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp3 ::= exp3 OR exp2 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 17a: sentencia de operacion OR");
			RESULT = new NodoOperacion(exI,tipoOp.or,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp3",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // write_stmt ::= WRITE exp3 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 16a: sentencia de escritura completa");
			RESULT = new NodoEscribir(ex);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // read_stmt ::= READ ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(variable!=null)
			{
				if(modoDepuracion) System.out.println("\t regla 15a: sentencia de lectura completa");
				RESULT= new NodoLeer(variable.toString());			
			}else
			{
				if(modoDepuracion) System.out.println("\t regla 15b: sentencia de lectura completa incorrecta");
				RESULT = null;			
			} 		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // assign_stmt ::= vector ASSIGN exp3 
            {
              NodoBase RESULT =null;
		int vecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase vec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(vec!=null)
			{
				if(modoDepuracion) System.out.println("\t regla 14a: sentencia asignacion completa");
				RESULT = new NodoAsignacion(vec,ex);							
			}else
			{
				if(modoDepuracion) System.out.println("\t regla 14b: sentencia asignacion completa incorrecta");
				RESULT = null;			
			}		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assign_stmt ::= ID ASSIGN exp3 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(variable!=null)
			{
				if(modoDepuracion) System.out.println("\t regla 14a: sentencia asignacion completa");
				RESULT = new NodoAsignacion(variable.toString(),ex);							
			}else
			{
				if(modoDepuracion) System.out.println("\t regla 14b: sentencia asignacion completa incorrecta");
				RESULT = null;			
			}		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // repeat_stmt ::= REPEAT stmt_seq UNTIL exp3 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 13a: sentencia repeat completa");
			RESULT = new NodoRepeat(exI,exD);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // for_stmt ::= FOR LPAREN assign_stmt SEMI exp1 SEMI assign_stmt RPAREN stmt_seq END 
            {
              NodoBase RESULT =null;
		int pasigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pasigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase pasig = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pcomprobleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pcomprobright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase pcomprob = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ppasoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ppasoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ppaso = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pcuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pcuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pcuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			if(modoDepuracion) System.out.println("\t regla 12a: sentencia for completa");
			RESULT = new NodoFor(pasig,pcomprob,ppaso,pcuerpo);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if_stmt ::= IF exp3 THEN stmt_seq ELSE stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			if(modoDepuracion) System.out.println("\t regla 11b: sentencia if completa");
			RESULT = new NodoIf(ex,pthen,pelse);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // if_stmt ::= IF exp3 THEN stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			if(modoDepuracion) System.out.println("\t regla 11a: sentencia if simple");
			RESULT = new NodoIf(ex,pthen);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // param_list2 ::= 
            {
              NodoBase RESULT =null;
		
			if(modoDepuracion) System.out.println("\t regla 10d: ninguna expresion");
			RESULT = null;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // param_list2 ::= exp1 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 10c: lista de una sola expresion");
			RESULT = ex;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // param_list2 ::= param_list2 COLON exp1 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
			NodoBase hijoActual = ini;
			
			if(hijoActual!=null)
			{
				while(hijoActual.TieneHermano())
				{
					hijoActual = hijoActual.getHermanoDerecha();
				}
				hijoActual.setHermanoDerecha(ex);
				
				if(modoDepuracion) System.out.println("\t regla 10a: lista de dos o mas expresiones");
				RESULT=ini;
			}else
			{
				if(modoDepuracion) System.out.println("\t regla 10b: lista de una sola expresion");
				RESULT=ex;
			}		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list2",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // param_list ::= 
            {
              NodoBase RESULT =null;
		
			if(modoDepuracion) System.out.println("\t regla 9e: ningun parametro");
			RESULT = null;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // param_list ::= INT ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(variable!=null)
			{
				if(modoDepuracion) System.out.println("\t regla 9c: lista de un solo parametro");
				RESULT= new NodoIdentificador(variable.toString());			
			}else
			{
				if(modoDepuracion) System.out.println("\t regla 9d: ningun parametro");
				RESULT = null;		
			}		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // param_list ::= param_list COLON INT ID 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			NodoBase hijoActual = ini;
			
			if(hijoActual!=null)
			{
				while(hijoActual.TieneHermano())
				{
					hijoActual = hijoActual.getHermanoDerecha();
				}
				
				hijoActual.setHermanoDerecha( new NodoIdentificador( variable.toString() ) );
				
				if(modoDepuracion) System.out.println("\t regla 10a: lista de dos o mas parametros");
				RESULT=ini;
			}else
			{
				if(modoDepuracion) System.out.println("\t regla 9b: lista de un solo parametro");
				RESULT = new NodoIdentificador(variable.toString());
			}		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // procedure_stmt ::= tipo ID LPAREN param_list2 RPAREN body 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pbodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pbodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase pbody = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
			if(modoDepuracion) System.out.println("\t regla 8a: procedimiento");
			RESULT = new NodoProcedimiento(variable,ini,pbody);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // call_stmt ::= ID EQ ID LPAREN param_list RPAREN 
            {
              NodoBase RESULT =null;
		int variable1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int variable1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String variable1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int variable2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variable2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			if(variable1!=null && variable1!=null)
			{
				if(modoDepuracion) System.out.println("\t regla 7c: llamada de funcion con retorno");
				RESULT = new NodoLLamada(variable1,variable2,ini);		
			}else
			{
				if(modoDepuracion) System.out.println("\t regla 7d: llamada de funcion con retorno incorrecta");
				RESULT = null;		
			}		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // call_stmt ::= ID LPAREN param_list RPAREN 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			if(variable!=null)
			{
				if(modoDepuracion) System.out.println("\t regla 7a: llamada de funcion sin retorno");
				RESULT = new NodoLLamada(variable,ini);		
			}else
			{
				if(modoDepuracion) System.out.println("\t regla 7b: llamada de funcion sin retorno incorrecta");
				RESULT = null;		
			}		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // body ::= BEGIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int pbodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pbodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pbody = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			if(modoDepuracion) System.out.println("\t regla 6a: cuerpo principal");
			RESULT = pbody;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= error 
            {
              NodoBase RESULT =null;
		
			if(modoDepuracion) System.out.println("\t regla 5l: error de sentencia");
			RESULT = null;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= RETURN FALSE 
            {
              NodoBase RESULT =null;
		
			if(modoDepuracion) System.out.println("\t regla 5k: sentencia de retorno de booleano false");
			RESULT = new NodoBoolean(false);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= RETURN TRUE 
            {
              NodoBase RESULT =null;
		
			if(modoDepuracion) System.out.println("\t regla 5j: sentencia de retorno de booleano true");
			RESULT = new NodoBoolean(true);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= RETURN simple_exp 
            {
              NodoBase RESULT =null;
		int sexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sexp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 5i: sentencia de returno de expresion matematica simple");
			RESULT =  sexp;				
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= call_stmt 
            {
              NodoBase RESULT =null;
		int scallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase scall = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 5h: sentencia de llamada de funcion");
			RESULT = scall;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= procedure_stmt 
            {
              NodoBase RESULT =null;
		int sprocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sprocright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sproc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 5g: sentencia de procedimiento");
			RESULT = sproc;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= for_stmt 
            {
              NodoBase RESULT =null;
		int sforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sforright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sfor = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 5f: sentencia de ciclo for");
			RESULT = sfor;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= write_stmt 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 5e: sentencia de escritura");
			RESULT = sesc;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= read_stmt 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 5d: sentencia de lectura");
			RESULT = slec;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= assign_stmt 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 5c: sentencia de asignacion");
			RESULT = sasi;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 5b: sentencia de repeat");
			RESULT = srep;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 5a: sentencia de if");
			RESULT = sif;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt_seq ::= stmt SEMI 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			if(modoDepuracion) System.out.println("\t regla 4c: una sola sentencia");
			RESULT = sent;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt_seq ::= stmt_seq stmt SEMI 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			NodoBase hijoActual = ini;
			
			if(hijoActual!=null)
			{
				while(hijoActual.TieneHermano())
				{
					hijoActual = hijoActual.getHermanoDerecha();
				}
				hijoActual.setHermanoDerecha(sent);
				
				if(modoDepuracion) System.out.println("\t regla 4a: multiples sentencias");
				RESULT=ini;
			}else
			{
				if(modoDepuracion) System.out.println("\t regla 4b: una sola sentencia");
				RESULT=sent;
			}		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_stmt ::= tipo ID LPAREN param_list RPAREN body 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pbodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pbodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase pbody = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 3a: cuerpo de función");
			RESULT = new NodoFuncion(variable,ini,pbody);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function_list ::= 
            {
              NodoBase RESULT =null;
		
			if(modoDepuracion) System.out.println("\t regla 2d: ninguna función");
			RESULT = null;		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // function_list ::= function_stmt 
            {
              NodoBase RESULT =null;
		int festleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int festright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fest = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			if(modoDepuracion) System.out.println("\t regla 2c: una función");
			RESULT = fest;					
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // function_list ::= function_list function_stmt 
            {
              NodoBase RESULT =null;
		int funistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase funist = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int festleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int festright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fest = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
				
			NodoBase hijoActual = funist;
			
			if(hijoActual!=null)
			{
				while(hijoActual.TieneHermano())
				{
					hijoActual = hijoActual.getHermanoDerecha();
				}
				hijoActual.setHermanoDerecha(fest);
				
				if(modoDepuracion) System.out.println("\t regla 2a: mas de una función");
				RESULT = funist;
			}else
			{
				if(modoDepuracion) System.out.println("\t regla 2b: una función");
				RESULT = fest;
			}		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= function_list body 
            {
              Object RESULT =null;
		int funistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase funist = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pbodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pbodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase pbody = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
								
			NodoBase hijoActual = funist;
						
			if(hijoActual!=null)
			{
				while(hijoActual.TieneHermano())
				{
					hijoActual = hijoActual.getHermanoDerecha();
				} 
				hijoActual.setHermanoDerecha(pbody);
				
				if(modoDepuracion) System.out.println("\t regla 1a: programa con funciones.");
				ast = new NodoPrograma(funist,pbody);
			}else
			{
				if(modoDepuracion) System.out.println("\t regla 1b: programa sin funciones.");
				ast = new NodoPrograma(pbody,);
			}					
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

