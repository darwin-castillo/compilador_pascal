package Tiny;

import java_cup.runtime.*;
import ast.*;

action code {:
	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
:}

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal WHILE;
terminal BEGIN;
terminal END;
terminal DO;
terminal FUNCTION;
terminal PROGRAM;
terminal DECLARE;
terminal TO;
terminal REPEAT;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal Integer NUM;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal BT;
terminal MAYORIGUAL;
terminal MENORIGUAL;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal LCORCHETE;
terminal RCORCHETE;
terminal SEMI;
terminal FOR;
terminal DIFERENTE;
terminal AND;
terminal OR;
terminal COLON;
terminal TRUE;
terminal FALSE;
terminal RETURN;
terminal INT;
terminal VOID;
terminal BOOLEAN;
terminal String ID;
terminal VAR;
terminal OF;
terminal ARRAY;



/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase declare_program;
non terminal NodoBase body_program;
non terminal NodoBase declare_var;
non terminal NodoBase nombre_var;
non terminal NodoBase list_var;
non terminal NodoBase function_list;
non terminal NodoBase function_stmt;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase call_stmt;
non terminal NodoBase body;
non terminal NodoBase param_list;
non terminal NodoBase for_stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase while_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase exp;
non terminal NodoBase exp2;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase vector;
non terminal NodoBase factor;
non terminal NodoBase tipo;
non terminal NodoBase addop;
non terminal NodoBase multop;
non terminal NodoBase comparison_op;
non terminal NodoBase comparison_log;


/* Precedencia de operadores */
precedence left OR;
precedence left AND;
precedence left EQ,LT,BT,MAYORIGUAL,MENORIGUAL,DIFERENTE;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left OVER;
precedence left ELSE;
precedence left LCORCHETE,RCORCHETE;
precedence left LPAREN, RPAREN;

/* REGLAS GRAMATICALES */
program  ::= declare_program:prog body_program:bprog	
                                       {: if(debug) System.out.println("\t regla 1"); 
						NodoBase hijoActual = prog;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(bprog);
							RESULT=prog;
						}else{
							RESULT=bprog;
						}
					:}
		;

declare_program ::= PROGRAM ID:idpro SEMI {: if(debug) System.out.println("\t regla 2"); 
					System.out.println("Asignando Nombre al programa");
					:}
		;


body_program   ::= lista_var:listvar function_stmt:fstmt body::bod{:
                                        if(debug) System.out.println("\t regla 3"); 
						NodoBase hijoActual = listvar;
                                                if(hijoActual !=null){
						while(hijoActual.TieneHermano()){
					        hijoActual = hijoActual.getHermanoDerecha();
							}
                                                hijoActual.setHermanoDerecha(fstmt);
                                                hijoActual.setHermanoDerecha(bod);
                    :}
;


stmt        ::= if_stmt:sif	{: if(debug) System.out.println("\t regla 3a"); 
					RESULT=sif;
					:}
            | repeat_stmt:srep	{: if(debug) System.out.println("\t regla 3b"); 
						RESULT=srep;
						:}
		    | while_stmt:wrep	{: if(debug) System.out.println("\t regla 3f"); 
						RESULT=wrep;
						:}
		    | do_while_stmt:dwrep	{: if(debug) System.out.println("\t regla 3g"); 
						RESULT=dwrep;
						:}
            | assign_stmt:sasi	{: if(debug) System.out.println("\t regla 3c"); 
						RESULT=sasi;
						:}
            | read_stmt:slec	{: if(debug) System.out.println("\t regla 3d"); 
					RESULT=slec;
					:}
            | write_stmt:sesc	{: if(debug) System.out.println("\t regla 3e"); 
					RESULT=sesc;
					:}
            | error	{: if(debug) System.out.println("\t regla 3f"); 
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
				:}
            ;

if_stmt     ::= IF exp:ex THEN stmt_seq:pthen END	{: if(debug) System.out.println("\t regla 4a"); 
		RESULT = new NodoIf(ex,pthen);
		:}
		| IF exp:ex THEN stmt_seq:pthen ELSE stmt_seq:pelse END	{: if(debug) System.out.println("\t regla 4b"); 
		RESULT = new NodoIf(ex,pthen,pelse);		
		:}
		;

repeat_stmt ::= REPEAT stmt_seq:cuerpo UNTIL exp:prueba	{: if(debug) System.out.println("\t regla 5"); 
							RESULT = new NodoRepeat(cuerpo,prueba);
							:}
		;
		
while_stmt ::= WHILE exp:prueba DO stmt_seq:cuerpo END	{: if(debug) System.out.println("\t regla 5w"); 
							RESULT = new NodoWhile(prueba,cuerpo);
							:}
		;		

do_while_stmt ::= DO stmt_seq:cuerpo WHILE exp:prueba END	{: if(debug) System.out.println("\t regla 5w"); 
							RESULT = new NodoDoWhile(cuerpo,prueba);
							:}
		;		
		

assign_stmt ::= ID:variable 	{: if(debug) System.out.println("\t regla 6 parte del medio"); 
				/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				String nombre = variable.getName();*/
				:}
			ASSIGN exp:ex	{: if(debug) System.out.println("\t regla 6 parte final");
					if(variable!=null)
					RESULT = new NodoAsignacion(variable.toString(),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					:}
		;

read_stmt   ::= READ ID:variable	{: if(debug) System.out.println("\t regla 7"); 
					System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
					}
					:}
		;

write_stmt  ::= WRITE exp:ex	{: if(debug) System.out.println("\t regla 8"); 
					RESULT= new NodoEscribir(ex);
					:}
		;

exp         ::= simple_exp:exI LT simple_exp:exD	{: if(debug) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								:} 
		| simple_exp:exI EQ simple_exp:exD	{: if(debug) System.out.println("\t regla 9b"); 
							RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							:}
		| simple_exp:ex	{: if(debug) System.out.println("\t regla 9c"); 
					RESULT = ex;
					:}
		;

simple_exp  ::= simple_exp:exI PLUS term:exD	{: if(debug) System.out.println("\t regla 10a"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							:}
		| simple_exp:exI MINUS term:exD	{: if(debug) System.out.println("\t regla 10b"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							:}
		| term:ex	{: if(debug) System.out.println("\t regla 10c"); 
				RESULT=ex;
				:}
		;

term        ::= term:exI TIMES factor:exD	{: if(debug) System.out.println("\t regla 11a"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							:}
		| term:exI OVER factor:exD	{: if(debug) System.out.println("\t regla 11b"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						:}
		| factor:ex	{: if(debug) System.out.println("\t regla 11c"); 
					RESULT=ex;
					:}
		;

factor      ::= LPAREN exp:ex RPAREN	{: if(debug) System.out.println("\t regla 12a"); 
							RESULT = ex;
							:}
		| NUM:valor	{: if(debug) System.out.println("\t regla 12b"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(valor.toString());					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| ID:variable	{: if(debug) System.out.println("\t regla 12c"); 
					if(variable!=null){
						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| error	{: if(debug) System.out.println("\t regla 12d"); 
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				:}
		;
